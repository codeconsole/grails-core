plugins {
    id 'java-platform'
    id 'maven-publish'
}

javaPlatform {
    allowDependencies()
}

def plugins = new Properties()
plugins.load(new StringReader(new File("$projectDir/plugins.properties").text))

def profiles = new Properties()
profiles.load(new StringReader(new File("$projectDir/profiles.properties").text))

ext {
    // When making changes in the dependencyVersions, remember to also update the Grails BOM Documentation:
    // https://docs.grails.org/snapshot/ref/Dependency%20Versions/Grails%20BOM.html
    def dependencyVersionsList = [
        "org.grails:grails-gradle-plugin::$grailsGradlePluginVersion",
        "jakarta.annotation:jakarta.annotation-api::$jakartaAnnotationApiVersion",
        "jakarta.xml.bind:jakarta.xml.bind-api::$jakartaXmlBindVersion",
        "org.mongodb:mongodb-driver:core,sync:$mongodbJavaDriverVersion",
        "org.mongodb:bson:,record-codec:$mongodbJavaDriverVersion",
        "org.grails:grails-datastore:async,core,web,gorm,gorm-async,gorm-support,gorm-rx,gorm-test,gorm-validation:$datastoreVersion",
        "org.grails:grails-datastore-gorm-hibernate5::$hibernateDatastoreVersion",
        "org.apache.groovy:groovy:xml,swing,console,json,ant,sql,templates,nio,dateutil,macro,test,test-junit5:$groovyVersion",
//        "org.springframework:spring:aop,aspects,beans,context-support,context,core,expression,instrument,jdbc,jms,messaging,orm,oxm,test,tx,web,webmvc,websocket:$springVersion",
        "io.methvin:directory-watcher::$directoryWatcherVersion",
        "org.springframework:springloaded::$springLoadedVersion",
        "org.springframework.boot:spring-boot-cli::$springBootVersion",
        "org.grails.plugins:async,events::$asyncVersion",
        "org.grails.plugins:converters::$legacyConvertersVersion",
        "org.grails:grails-async,grails-events:gpars,rxjava,rxjava2:$asyncVersion",
        "org.yaml:snakeyaml::$snakeyamlVersion",
        "org.spockframework:spock,spock:core,spring:$spockVersion",
        "org.grails.plugins:gsp::$gspVersion",
        "org.grails:grails-web-gsp::$gspVersion",
        "org.grails:grails-testing-support,grails-gorm-testing-support,grails-web-testing-support::$testingSupportVersion",
        "org.junit.jupiter:junit-jupiter-api::$junitVersion",
        "org.grails:views-json-testing-support::$viewsVersion",
        "com.h2database:h2::$h2Version",
        "org.hamcrest:hamcrest-core::$hamcrestVersion",
        "org.fusesource.jansi:jansi::$jansiVersion",
        "jline:jline::$jlineVersion",
        "net.java.dev.jna:jna::$jnaVersion",
        "org.apache.commons:commons-text::$commonsTextVersion",
        "commons-codec:commons-codec::$commonsCodecVersion",
        "org.grails:grails-datastore:core,gorm,gorm-support,gorm-validation:$datastoreVersion",
        "org.aspectj:aspectjrt::$aspectjVersion",
        "org.aspectj:aspectjweaver::$aspectjVersion",
        "jakarta.inject:jakarta.inject-api::$jakartaInjectVersion",
        "jakarta.persistence:jakarta.persistence-api::$jakartaPersistenceVersion",
        "jakarta.annotation:jakarta.annotation-api::$jakartaAnnotationApiVersion",
        "jakarta.servlet:jakarta.servlet-api::$servletApiVersion",
        "com.github.ben-manes.caffeine:caffeine::$caffeineVersion",
        "org.slf4j:slf4j:api,simple:$slf4jVersion",
        "org.slf4j:jcl-over-slf4j::$slf4jVersion",
        "org.apache.ant:ant:,junit:$antVersion",
        "org.grails:grails-gdoc-engine::$gdocEngineVersion",
        "org.asciidoctor:asciidoctorj::$asciidoctorjVersion",
        "org.xhtmlrenderer:flying-saucer-pdf-openpdf::$xhtmlRendererVersion",
        "org.jsoup:jsoup::$jsoupVersion",
        "org.apache.tomcat:tomcat-jdbc::$tomcatVersion",
        "com.fasterxml.jackson.core:jackson-databind::$jacksonVersion"
    ]
    dependencyVersions = dependencyVersionsList.collect {
        def info = it.toString().split(':')
        [group: info[0], names: info[1].split(','), modules: info[2].split(','), version: info[3]]
    }
}

dependencies {
    api platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    constraints {
        plugins.each { key, version ->
            api "org.grails.plugins:${key}:\${${key}.version}"
        }
        profiles.each { key, version ->
            api "org.grails.profiles:${key}:\${${key}.version}"
        }

        dependencyVersions.each {
            def depList = GroovyCollections
                    .combinations(it.names, it.modules)
                    .collect { it.join('-') }
                    .collect { it.endsWith('-') ? it[0..-2] : it }

            for (dependency in depList) {
                it.modules.each { module ->
                    api "${it.group}:${dependency}:${it.version}"
                }
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.javaPlatform

            pom.withXml {
                def root = asNode()
                def propsNode = root.appendNode('properties')

                plugins.each { key, version ->
                    propsNode.appendNode("${key}.version", version)
                }
                profiles.each { key, version ->
                    propsNode.appendNode("${key}.version", version)
                }
            }
        }
    }
}