// Copyright 2024 the original author or authors.

plugins {
    id 'java-platform'
    id 'maven-publish'
}

javaPlatform {
    allowDependencies()
}

def plugins = new Properties()
plugins.load(new StringReader(new File("$projectDir/plugins.properties").text))

def profiles = new Properties()
profiles.load(new StringReader(new File("$projectDir/profiles.properties").text))

def versions = new Properties()
versions.load(new StringReader(new File("$projectDir.parentFile/gradle.properties").text))

ext {
    // When making changes in the dependencyVersions, remember to also update the Grails BOM Documentation:
    // https://docs.grails.org/snapshot/ref/Dependency%20Versions/Grails%20BOM.html
    // Grails dependencies are listed in SCOTTL format:
    dependenciesOverview = """\
        com.fasterxml.jackson.core:jackson-databind::
        com.github.ben-manes.caffeine:caffeine::
        com.github.javaparser:javaparser-core::
        com.h2database:h2::
        commons-codec:commons-codec::
        io.methvin:directory-watcher::
        jakarta.annotation:jakarta.annotation-api::
        jakarta.inject:jakarta.inject-api::
        jakarta.persistence:jakarta.persistence-api::
        jakarta.servlet:jakarta.servlet-api::
        jakarta.xml.bind:jakarta.xml.bind-api::$jakartaXmlBindVersion
        jline:jline::
        net.bytebuddy:byte-buddy::
        net.java.dev.jna:jna::
        org.apache.ant:ant:,junit:
        org.apache.commons:commons-text::
        org.apache.groovy:groovy:ant,cli-picocli,console,dateutil,json,macro,nio,sql,swing,templates,test,test-junit5,xml:$groovyVersion
        org.apache.tomcat:tomcat-jdbc::$tomcatVersion:tomcat
        org.apache.tomcat.embed:tomcat-embed-core::$tomcatVersion:tomcat
        org.apache.tomcat.embed:tomcat-embed-logging-juli::
        org.asciidoctor:asciidoctorj::
        org.aspectj:aspectjrt,aspectjweaver::
        org.fusesource.jansi:jansi::
        com.github.spotbugs:spotbugs-annotations::
        org.grails.plugins:async,events::$asyncVersion
        org.grails.plugins:converters::
        org.grails.plugins:gsp::$gspVersion
        org.grails:grails-async,grails-events:gpars,rxjava,rxjava2:$asyncVersion
        org.grails:grails-datastore-gorm-hibernate5::
        org.grails:grails-datastore:async,core,gorm,gorm-async,gorm-support,gorm-rx,gorm-test,gorm-validation,web:$datastoreVersion
        org.grails:grails-gdoc-engine::
        org.grails:grails-gradle-plugin::$grailsGradlePluginVersion
        org.grails:grails-testing-support,grails-gorm-testing-support,grails-web-testing-support::
        org.grails:grails:grails-web-taglib,gsp,web-gsp:$gspVersion:gsp
        org.grails:views-json-testing-support::
        org.hamcrest:hamcrest-core::$hamcrestVersion
        org.jsoup:jsoup::
        org.mongodb:bson:,record-codec:$mongodbJavaDriverVersion
        org.mongodb:mongodb-driver:core,sync:$mongodbJavaDriverVersion
        org.objenesis:objenesis::
        org.slf4j:jcl-over-slf4j::$slf4jVersion
        org.slf4j:slf4j:api,simple:$slf4jVersion
        org.spockframework:spock-core,spock-spring::$spockVersion
        org.springframework.boot:spring-boot-cli::$springBootVersion
        org.springframework:springloaded::
        org.xhtmlrenderer:flying-saucer-pdf-openpdf::
        org.yaml:snakeyaml::
    """.stripIndent(true).trim().readLines().collect {
        def info = it.toString().split(':', -1)
        def dep = [group: info[0], names: info[1].split(','), modules: info[2].split(','), version: info.length >= 4? info[3] : null]
        dep.name = info.length == 5? info[4] : dep.names[0] // allow name override
        dep.version = dep.version ?: versions.get("${dep.name}.version".toString()) ?: '\t\t\t\t*** UNDEFINED **'
        dep
    }.collectEntries {
        def depList = GroovyCollections
                .combinations(it.names, it.modules)
                .collect { it.join('-') }
                .collect { it.endsWith('-') ? it[0..-2] : it }
        [(it):depList]
    }

    dependencyList = dependenciesOverview.collectMany { dependency, artifacts ->
        artifacts.collect { artifactId ->
            [groupId: dependency.group, artifactId: artifactId,
             versionValue: dependency.version, name: dependency.name]
        }
    }

    pluginsAndProfiles =
        plugins.collect { [groupId: "org.grails.plugins", artifactId:it.key, versionValue: it.value, name: "plugins-${it.key}"] } +
        profiles.collect { [groupId: "org.grails.profiles", artifactId:it.key, versionValue: it.value, name: "profiles-${it.key}"] }

    dependenciesVersions = (dependencyList + pluginsAndProfiles).sort { it.name }
            .groupBy { it.name }.collect { it.value.first() } // remove duplicates

    allDependencies = (pluginsAndProfiles + dependencyList).sort { it.name + it.artifactId }
    allDependencies.each { it << [version: "${it.name}.version"] }
}

allDependencies.each {
    if (!isBuildSnapshot && version.endsWith("-SNAPSHOT")) {
        throw new RuntimeException("Cannot have a snapshot dependency $it.version on a $it.name [$it.groupId] for a release!")
    }
}

dependencies {
    api platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    constraints {
        allDependencies.each {
            api "${it.groupId}:${it.artifactId}:${it.versionValue}"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                def root = asNode()

                def propsNode = root.appendNode('properties')
                propsNode.appendNode('spring-boot.version', springBootVersion)
                dependenciesVersions.each {
                    propsNode.appendNode(it.version, it.versionValue)
                }

                def appendNodes = { node, attrs ->
                    attrs.each {
                        node.appendNode(it.key, it.value)
                    }
                }

                def dpm = root.appendNode('dependencyManagement')
                def deps = dpm.appendNode('dependencies')
                appendNodes(deps.appendNode('dependency'), [
                    groupId: 'org.springframework.boot',
                    artifactId: 'spring-boot-dependencies',
                    version: '${spring-boot.version}',
                    type: 'pom',
                    scope: 'import'
                ])

                project.parent.subprojects.findResults {
                    if (it.name == 'grails-bom') return null
                    [groupId: it.group, artifactId: it.name, version: "\${${it.version}}"] +
                        (it.name == 'grails-dependencies'? [type:'pom'] : [])
                }.each {
                    appendNodes(deps.appendNode('dependency'), it)
                }

                allDependencies.collect { def m = it.subMap('groupId', 'artifactId', 'version')
                    m + [version: "\${${m.version}}"]
                }.each {
                    appendNodes(deps.appendNode('dependency'), it)
                }
            }
        }
    }
}

task dependabot {
    group = 'Dependency Management'
    description = 'Runs dependabot tasks.'

    def args = project.gradle.startParameter.taskNames.findAll { it != 'dependabot' }

    doLast {
        def action = project.findProperty('generate') ?: project.findProperty('gen') ?: 'gradle'

        switch (action) {
            case 'properties':
                println "# Generated by: ./gradlew :grails-bom:dependabot -Pgen=properties"
                dependenciesVersions.each {
                    println "$it.version=$it.versionValue"
                }
                break
            default:
                def dependabot = new File("${projectDir.parentFile}/dependabot/build.gradle")
                dependabot.parentFile.mkdirs()
                dependabot.write("""\
                    // Gemerated by: ./gradlew :grails-bom:dependabot
                    plugins {
                        id 'java'
                    }
                
                    dependencies {
                    ${allDependencies.collect { "    compileOnly ${it.groupId}:${it.artifactId}:\${${it.version}}" }.join('\n                    ')}
                    }
                    """.stripIndent(true).trim())
                println "${dependabot} created."
                break
        }
    }
}